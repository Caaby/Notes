Workspace：工作区
Index / Stage：暂存区
Repository：仓库区（或本地仓库）
Remote：远程仓库

Git配置
$ git config --global user.name "Your Name"
$ git config --global user.email "email@example.com"
git config命令的--global参数，表明这台机器上的所有Git仓库都会使用这个配置，也可以对某个仓库指定不同的用户名和邮箱地址。

工作区：在电脑里能看到的目录；
版本库：在工作区有一个隐藏目录.git，是Git的版本库。
Git的版本库中存了很多东西，其中最重要的就是称为stage（或者称为index）的暂存区，还有Git自动创建的master，以及指向master的指针HEAD。

git add实际上是把文件添加到暂存区
git commit实际上是把暂存区的所有内容提交到当前分支

$ git checkout -- <file>
该命令是指将文件在工作区的修改全部撤销，这里有两种情况：
	一种是file自修改后还没有被放到暂存区，现在，撤销修改就回到和版本库一模一样的状态；
	一种是file已经添加到暂存区后，又作了修改，现在，撤销修改就回到添加到暂存区后的状态。
	总之，就是让这个文件回到最近一次git commit或git add时的状态。

删除文件
$ git rm <file>
git rm <file>相当于执行

$ rm <file>
$ git add <file>
$ git commit -m "say something..."
$ git push(optional)
删除文件解释
Q：比如执行了rm text.txt 误删了怎么恢复？ A：执行git checkout -- text.txt 把版本库的东西重新写回工作区就行了 Q：如果执行了git rm text.txt我们会发现工作区的text.txt也删除了，怎么恢复？ A：先撤销暂存区修改，重新放回工作区，然后再从版本库写回到工作区
$ git reset head text.txt
$ git checkout -- text.txt
Q：如果真的想从版本库里面删除文件怎么做？ A：执行git commit -m "delete text.txt"，提交后最新的版本库将不包含这个文件
版本回退
git reset --hard HEAD 文件未提交 恢复代码

git 
常用分支命令
查看分支：git branch

创建分支：git branch <name>

切换分支：git checkout <name>

创建+切换分支：git checkout -b <name>

合并某分支到当前分支：git merge <name>

删除分支：git branch -d <name>

强制删除: git branch -D <branchname>

查看分支合并图
当Git无法自动合并分支时，就必须首先解决冲突。 解决冲突后，才可以继续操作。
$ git log --graph

查看分支树(简版)
为什么要敲这么长的命令呢？因为树很长，而简版一眼可以看穿架构
git log --graph --pretty=oneline --abbrev-commit

普通模式合并分支:禁用no-ff
因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
合并分支时，加上--no-ff参数就可以用普通模式合并，能看出来曾经做过合并，包含作者和时间戳等信息，而fast forward合并就看不出来曾经做过合并。
git merge --no-ff -m "description" <branchname>

保存工作现场
$ git stash
查看工作现场列表
$ git stash list
恢复工作现场
但是恢复后，stash内容并不删除，你需要手动删除
git stash apply

删除工作现场
git stash drop

恢复后自动删除工作现场
git stash pop

恢复指定的工作现场
git stash apply <stash version>

丢弃一个没有合并过的分支
$ git branch -D <branchname>

查看远程库信息
$ git remote -v

从本地推送分支
如果推送失败，先用git pull抓取远程的新提交；
$ git push origin branch-name

从远程抓取分支
如果有冲突，要先处理冲突。
$ git pull

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
查看
$ git log

简化版日志
$ git log --pretty=oneline

查看前N条
git log -n

变更日志
-n 同上,不加则显示全部
git log --stat -n

查看提交修改
查看某次commit做了哪些修改
git show <commit-hash-id>
退出log状态
有时候日志过长，可以按下英文q退出状态

查看提交历史和说明
$ git reflog

创建SSH Key
$ ssh-keygen -t rsa -C "youremail@example.com"

关联远程仓库
git remote add origin git@github.com:git_username/repository_name.git
添加后，远程库的名字就是origin

取消关联远程库
git remote remove origin

查看远程库详细信息
如果没有相关权限，则看不到相关地址信息
例如没有推送权限，则看不到push地址
git remote -v

推送到远程仓库
$ git push origin <branch-name>
-u 表示第一次推送master分支的所有内容,不过建议先clone在push，尽量避免此方法

$ git push -u origin <branch-name>
日常提交只需要使用git push即可

从远程克隆
$ git clone https://github.com/usern/repositoryname.git
日常获取只需要使用git pull即可

设置别名
git config --global alias.<name> <git-name>
git config --global alias.别名 '指定代码
建议熟悉git命令后使用

标签
tag就是一个让人容易记住的有意义的名字，它跟某个commit绑在一起。

新建一个标签
$ git tag <tagname>
命令git tag <tagname>用于新建一个标签，默认为HEAD，也可以指定一个commit id。

指定标签信息
you can use like this: git tag -a <tagname> -m "say something..."

$ git tag -a <tagname> -m <description> <branchname> or commit_id
PGP签名标签
you can use like this: git tag -s <tagname> -m "say something..."

$ git tag -s <tagname> -m <description> <branchname> or commit_id
查看所有标签
$ git tag
推送一个本地标签
$ git push origin <tagname>
推送全部未推送过的本地标签
$ git push origin --tags
删除一个本地标签
$ git tag -d <tagname>
删除一个远程标签
$ git push origin :refs/tags/<tagname>

>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
git rm a.txt ，误将a.txt删除后找回方法：

1. git log 找到离没删文件前最近的commit id
2. 将操作过的其它文件转移
3. git reset --hard "commit id"

仓库区有文件，本地无文件
git checkout <filename>

运行tag命令时指定-a选项创建附注标签：
$ git tag -a v1.0 -m "my version 1.0"

查看标签信息
$ git show v1.0

在某个历史提交04f654b上补打一个标签，只需在命令的末尾指定提交的检验和。
$ git tag -a v1.1 -m "version 1.1" 04f654b